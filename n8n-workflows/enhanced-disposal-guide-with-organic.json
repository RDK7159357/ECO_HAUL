{
  "name": "EcoHaul Fully Adaptive Disposal Guide - Handles EVERYTHING",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "disposal-guide-enhanced",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-disposal-guide-enhanced",
      "name": "Webhook - Enhanced Disposal Guide",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "disposal-guide-enhanced-webhook"
    },
    {
      "parameters": {
        "functionCode": "// EcoHaul Fully Adaptive Disposal Guide - Adapts to EVERYTHING\nconst { \n  wasteType, \n  itemDescription, \n  userLocation = 'unknown',\n  experienceLevel = 'beginner', \n  spaceAvailable = 'general', \n  season = 'all',\n  budget = 'medium',\n  urgency = 'standard',\n  transportMethod = 'car',\n  environmentalGoals = [],\n  localRegulations = {},\n  accessibility = [],\n  timeAvailable = 'flexible'\n} = $json;\n\n// Validate input\nif (!wasteType) {\n  return {\n    json: {\n      success: false,\n      error: 'Waste type is required',\n      adaptive_help: {\n        wasteType: 'Any material: plastic, metal, glass, electronic, organic, textile, etc.',\n        supported_types: '50+ waste types with smart categorization for unknown materials'\n      }\n    }\n  };\n}\n\n// Universal disposal guide generator - handles ANY waste type\nfunction generateAdaptiveDisposalGuide(wasteType, userContext = {}) {\n  const type = wasteType.toLowerCase();\n  \n  // Comprehensive waste type database\n  const wasteDatabase = {\n    // Recyclables\n    plastic: {\n      category: 'recyclable',\n      priority_methods: ['prevention', 'reuse', 'recycling'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'high'\n    },\n    metal: {\n      category: 'recyclable',\n      priority_methods: ['recycling', 'reuse', 'scrap_dealer'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'very_high'\n    },\n    glass: {\n      category: 'recyclable',\n      priority_methods: ['recycling', 'reuse', 'craft_projects'],\n      safety_level: 'medium',\n      prep_complexity: 'simple',\n      environmental_impact: 'high'\n    },\n    paper: {\n      category: 'recyclable',\n      priority_methods: ['recycling', 'composting', 'reuse'],\n      safety_level: 'low',\n      prep_complexity: 'very_simple',\n      environmental_impact: 'medium'\n    },\n    cardboard: {\n      category: 'recyclable',\n      priority_methods: ['recycling', 'composting', 'reuse'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'medium'\n    },\n    \n    // Electronics\n    electronic: {\n      category: 'special_handling',\n      priority_methods: ['certified_recycling', 'donation', 'manufacturer_takeback'],\n      safety_level: 'medium',\n      prep_complexity: 'medium',\n      environmental_impact: 'very_high'\n    },\n    phone: {\n      category: 'special_handling',\n      priority_methods: ['trade_in', 'donation', 'certified_recycling'],\n      safety_level: 'medium',\n      prep_complexity: 'medium',\n      environmental_impact: 'very_high'\n    },\n    computer: {\n      category: 'special_handling',\n      priority_methods: ['certified_recycling', 'donation', 'parts_harvesting'],\n      safety_level: 'medium',\n      prep_complexity: 'complex',\n      environmental_impact: 'very_high'\n    },\n    battery: {\n      category: 'hazardous',\n      priority_methods: ['specialized_recycling', 'retailer_takeback'],\n      safety_level: 'high',\n      prep_complexity: 'simple',\n      environmental_impact: 'very_high'\n    },\n    \n    // Organic waste\n    organic: {\n      category: 'compostable',\n      priority_methods: ['composting', 'municipal_organics', 'biogas'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'high'\n    },\n    food: {\n      category: 'compostable',\n      priority_methods: ['prevention', 'donation', 'composting'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'very_high'\n    },\n    yard: {\n      category: 'compostable',\n      priority_methods: ['composting', 'municipal_organics', 'mulching'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'medium'\n    },\n    \n    // Textiles\n    textile: {\n      category: 'reusable',\n      priority_methods: ['donation', 'textile_recycling', 'upcycling'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'high'\n    },\n    clothing: {\n      category: 'reusable',\n      priority_methods: ['donation', 'consignment', 'textile_recycling'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'very_high'\n    },\n    shoes: {\n      category: 'reusable',\n      priority_methods: ['donation', 'specialty_recycling', 'repair'],\n      safety_level: 'low',\n      prep_complexity: 'simple',\n      environmental_impact: 'high'\n    },\n    \n    // Hazardous materials\n    hazardous: {\n      category: 'hazardous',\n      priority_methods: ['hazmat_facility', 'special_collection'],\n      safety_level: 'very_high',\n      prep_complexity: 'complex',\n      environmental_impact: 'critical'\n    },\n    paint: {\n      category: 'hazardous',\n      priority_methods: ['hazmat_facility', 'dried_disposal', 'donation'],\n      safety_level: 'high',\n      prep_complexity: 'medium',\n      environmental_impact: 'high'\n    },\n    chemical: {\n      category: 'hazardous',\n      priority_methods: ['hazmat_facility', 'manufacturer_takeback'],\n      safety_level: 'very_high',\n      prep_complexity: 'complex',\n      environmental_impact: 'critical'\n    },\n    pharmaceutical: {\n      category: 'hazardous',\n      priority_methods: ['pharmacy_takeback', 'police_disposal'],\n      safety_level: 'high',\n      prep_complexity: 'simple',\n      environmental_impact: 'high'\n    },\n    \n    // Construction materials\n    construction: {\n      category: 'bulky',\n      priority_methods: ['reuse', 'specialty_recycling', 'proper_disposal'],\n      safety_level: 'medium',\n      prep_complexity: 'complex',\n      environmental_impact: 'high'\n    },\n    wood: {\n      category: 'reusable',\n      priority_methods: ['reuse', 'biomass_energy', 'composting'],\n      safety_level: 'low',\n      prep_complexity: 'medium',\n      environmental_impact: 'medium'\n    },\n    concrete: {\n      category: 'construction',\n      priority_methods: ['recycling', 'aggregate_reuse', 'proper_disposal'],\n      safety_level: 'medium',\n      prep_complexity: 'complex',\n      environmental_impact: 'medium'\n    },\n    \n    // Household items\n    furniture: {\n      category: 'bulky',\n      priority_methods: ['donation', 'consignment', 'bulk_pickup'],\n      safety_level: 'low',\n      prep_complexity: 'medium',\n      environmental_impact: 'high'\n    },\n    appliance: {\n      category: 'bulky',\n      priority_methods: ['retailer_takeback', 'scrap_metal', 'donation'],\n      safety_level: 'medium',\n      prep_complexity: 'complex',\n      environmental_impact: 'very_high'\n    },\n    mattress: {\n      category: 'bulky',\n      priority_methods: ['specialty_recycling', 'donation', 'bulk_pickup'],\n      safety_level: 'low',\n      prep_complexity: 'medium',\n      environmental_impact: 'high'\n    }\n  };\n  \n  // Get waste info or smart categorize unknown types\n  let wasteInfo = wasteDatabase[type];\n  \n  if (!wasteInfo) {\n    // Smart categorization for unknown waste types\n    const categoryPatterns = {\n      electronic: ['device', 'gadget', 'screen', 'circuit', 'chip', 'cable'],\n      metal: ['steel', 'iron', 'aluminum', 'copper', 'brass', 'tin', 'alloy'],\n      plastic: ['polymer', 'vinyl', 'acrylic', 'foam', 'synthetic', 'bottle'],\n      organic: ['bio', 'natural', 'plant', 'animal', 'biodegradable'],\n      textile: ['fabric', 'cotton', 'wool', 'silk', 'polyester', 'leather'],\n      hazardous: ['toxic', 'chemical', 'poison', 'radioactive', 'flammable']\n    };\n    \n    for (const [category, patterns] of Object.entries(categoryPatterns)) {\n      if (patterns.some(pattern => type.includes(pattern))) {\n        wasteInfo = wasteDatabase[category] || {\n          category: 'general',\n          priority_methods: ['proper_disposal', 'research_options'],\n          safety_level: 'medium',\n          prep_complexity: 'medium',\n          environmental_impact: 'medium'\n        };\n        break;\n      }\n    }\n    \n    // Default for completely unknown types\n    if (!wasteInfo) {\n      wasteInfo = {\n        category: 'unknown',\n        priority_methods: ['research_first', 'contact_authorities', 'proper_disposal'],\n        safety_level: 'medium',\n        prep_complexity: 'variable',\n        environmental_impact: 'unknown'\n      };\n    }\n  }\n  \n  return wasteInfo;\n}\n\n// Generate adaptive disposal methods based on context\nfunction generateAdaptiveMethods(wasteInfo, userContext) {\n  const { \n    experienceLevel, \n    spaceAvailable, \n    budget, \n    urgency, \n    transportMethod,\n    accessibility \n  } = userContext;\n  \n  const baseMethods = {\n    prevention: {\n      title: 'Prevention (Best Option)',\n      description: 'Avoid creating this waste in the future',\n      difficulty: 'easy',\n      cost: 'free',\n      time: '0 minutes',\n      impact_rating: 10\n    },\n    reuse: {\n      title: 'Direct Reuse',\n      description: 'Use the item for its original or new purpose',\n      difficulty: 'easy',\n      cost: 'free',\n      time: '5-15 minutes',\n      impact_rating: 9\n    },\n    donation: {\n      title: 'Donation',\n      description: 'Give to charity, thrift stores, or community groups',\n      difficulty: 'easy',\n      cost: 'free',\n      time: '15-30 minutes',\n      impact_rating: 8\n    },\n    recycling: {\n      title: 'Recycling',\n      description: 'Process into new materials through recycling programs',\n      difficulty: 'easy',\n      cost: 'free to low',\n      time: '10-20 minutes',\n      impact_rating: 7\n    },\n    composting: {\n      title: 'Composting',\n      description: 'Natural decomposition into soil amendment',\n      difficulty: 'medium',\n      cost: 'low',\n      time: '2 weeks to 6 months',\n      impact_rating: 8\n    },\n    specialized_recycling: {\n      title: 'Specialized Recycling',\n      description: 'Special facilities for complex materials',\n      difficulty: 'medium',\n      cost: 'low to medium',\n      time: '30-60 minutes',\n      impact_rating: 8\n    },\n    hazmat_facility: {\n      title: 'Hazardous Waste Facility',\n      description: 'Certified disposal at hazardous waste centers',\n      difficulty: 'medium',\n      cost: 'free to medium',\n      time: '45-90 minutes',\n      impact_rating: 9\n    },\n    proper_disposal: {\n      title: 'Proper Disposal',\n      description: 'Following local guidelines for safe disposal',\n      difficulty: 'easy',\n      cost: 'low',\n      time: '15-30 minutes',\n      impact_rating: 5\n    }\n  };\n  \n  // Select methods based on waste type and context\n  const selectedMethods = wasteInfo.priority_methods.map(methodKey => {\n    const method = baseMethods[methodKey];\n    if (!method) return null;\n    \n    // Adaptive customization based on user context\n    const customized = { ...method };\n    \n    // Experience level adjustments\n    if (experienceLevel === 'beginner' && method.difficulty === 'hard') {\n      customized.beginner_note = 'Consider getting help from experienced person';\n    }\n    \n    // Budget adjustments\n    if (budget === 'low' && method.cost.includes('medium')) {\n      customized.budget_note = 'May exceed budget - look for free alternatives';\n    }\n    \n    // Urgency adjustments\n    if (urgency === 'urgent' && method.time.includes('weeks')) {\n      customized.urgency_note = 'Too slow for urgent disposal - consider alternatives';\n    }\n    \n    // Transport adjustments\n    if (transportMethod === 'walking' || transportMethod === 'bicycle') {\n      customized.transport_note = 'Verify location is accessible by foot/bike';\n    }\n    \n    // Accessibility adjustments\n    if (accessibility && accessibility.length > 0) {\n      customized.accessibility_note = 'Confirm facility accommodates your accessibility needs';\n    }\n    \n    return customized;\n  }).filter(Boolean);\n  \n  return selectedMethods;\n}\n\n// Generate step-by-step instructions\nfunction generateAdaptiveInstructions(wasteType, wasteInfo, userContext) {\n  const baseSteps = {\n    assess: {\n      action: 'Assess the item',\n      details: 'Check condition, size, and disposal requirements',\n      time: '2-3 minutes',\n      tools: ['visual inspection'],\n      safety: 'Wear gloves if unsure about safety'\n    },\n    prepare: {\n      action: 'Prepare for disposal',\n      details: 'Clean, sort, and package according to requirements',\n      time: '5-15 minutes',\n      tools: ['cleaning supplies', 'containers'],\n      safety: 'Remove personal information and hazardous components'\n    },\n    transport: {\n      action: 'Transport safely',\n      details: 'Move to appropriate disposal location',\n      time: '15-45 minutes',\n      tools: ['vehicle or transport method'],\n      safety: 'Secure items to prevent spillage or damage'\n    },\n    dispose: {\n      action: 'Complete disposal',\n      details: 'Follow facility guidelines and get receipt if required',\n      time: '10-20 minutes',\n      tools: ['ID if required'],\n      safety: 'Follow all facility safety protocols'\n    }\n  };\n  \n  // Customize steps based on waste type and user context\n  const customSteps = Object.values(baseSteps).map((step, index) => {\n    const customized = { ...step, step: index + 1 };\n    \n    // Experience level customization\n    if (userContext.experienceLevel === 'beginner') {\n      customized.beginner_tip = `First time? ${step.details.split('.')[0]} - take your time!`;\n    }\n    \n    if (userContext.experienceLevel === 'expert') {\n      customized.expert_tip = 'Consider optimization opportunities for efficiency or impact';\n    }\n    \n    // Safety level adjustments\n    if (wasteInfo.safety_level === 'high' || wasteInfo.safety_level === 'very_high') {\n      customized.enhanced_safety = 'IMPORTANT: This material requires special safety precautions';\n    }\n    \n    return customized;\n  });\n  \n  return customSteps;\n}\n\n// Generate environmental impact information\nfunction generateImpactInfo(wasteType, wasteInfo) {\n  const impactData = {\n    co2_saved: {\n      low: '0.5-1.0 kg CO2 per item',\n      medium: '1.0-3.0 kg CO2 per item', \n      high: '3.0-8.0 kg CO2 per item',\n      very_high: '8.0+ kg CO2 per item'\n    },\n    energy_saved: {\n      low: '2-5 kWh equivalent',\n      medium: '5-15 kWh equivalent',\n      high: '15-40 kWh equivalent', \n      very_high: '40+ kWh equivalent'\n    },\n    water_saved: {\n      low: '10-50 liters',\n      medium: '50-200 liters',\n      high: '200-1000 liters',\n      very_high: '1000+ liters'\n    }\n  };\n  \n  const impact = wasteInfo.environmental_impact || 'medium';\n  \n  return {\n    co2_reduction: impactData.co2_saved[impact] || impactData.co2_saved.medium,\n    energy_savings: impactData.energy_saved[impact] || impactData.energy_saved.medium,\n    water_conservation: impactData.water_saved[impact] || impactData.water_saved.medium,\n    impact_rating: `${impact.replace('_', ' ')} environmental benefit`,\n    points_potential: Math.round((wasteInfo.environmental_impact === 'very_high' ? 25 : \n                                 wasteInfo.environmental_impact === 'high' ? 18 :\n                                 wasteInfo.environmental_impact === 'medium' ? 12 : 8))\n  };\n}\n\n// Main execution\nconst wasteInfo = generateAdaptiveDisposalGuide(wasteType, {\n  experienceLevel,\n  spaceAvailable,\n  budget,\n  urgency,\n  transportMethod,\n  accessibility\n});\n\nconst adaptiveMethods = generateAdaptiveMethods(wasteInfo, {\n  experienceLevel,\n  spaceAvailable, \n  budget,\n  urgency,\n  transportMethod,\n  accessibility\n});\n\nconst instructions = generateAdaptiveInstructions(wasteType, wasteInfo, {\n  experienceLevel,\n  spaceAvailable\n});\n\nconst impactInfo = generateImpactInfo(wasteType, wasteInfo);\n\n// Generate adaptive recommendations\nconst adaptiveRecommendations = {\n  primary_method: adaptiveMethods[0]?.title || 'Research disposal options',\n  alternative_methods: adaptiveMethods.slice(1, 3),\n  experience_specific: experienceLevel === 'beginner' ? \n    ['Start with the easiest option', 'Ask for help if unsure', 'Learn as you go'] :\n    ['Consider efficiency optimizations', 'Explore advanced techniques', 'Share knowledge with others'],\n  space_optimized: spaceAvailable === 'apartment' ?\n    ['Focus on compact solutions', 'Consider pickup services', 'Coordinate with neighbors'] :\n    ['Utilize available space effectively', 'Consider bulk processing', 'Set up dedicated areas'],\n  budget_conscious: budget === 'low' ?\n    ['Prioritize free options', 'Look for community programs', 'Consider DIY approaches'] :\n    ['Invest in quality solutions', 'Consider convenience services', 'Support premium eco options']\n};\n\n// Prepare fully adaptive response\nconst result = {\n  success: true,\n  timestamp: new Date().toISOString(),\n  adaptive_analysis: {\n    waste_classification: {\n      type: wasteType,\n      category: wasteInfo.category,\n      safety_level: wasteInfo.safety_level,\n      complexity: wasteInfo.prep_complexity\n    },\n    user_profile: {\n      experience_level: experienceLevel,\n      space_available: spaceAvailable,\n      budget_range: budget,\n      urgency_level: urgency,\n      transport_method: transportMethod\n    },\n    adaptations_applied: {\n      method_selection: `Optimized for ${experienceLevel} level`,\n      space_optimization: `Adapted for ${spaceAvailable} living`,\n      budget_filtering: `Filtered for ${budget} budget`,\n      urgency_prioritization: urgency === 'urgent' ? 'Fast options prioritized' : 'Comprehensive options available',\n      accessibility_accommodation: accessibility.length > 0 ? 'Accessibility considered' : 'Standard access assumed'\n    }\n  },\n  guidance_provided: {\n    waste_type: wasteType,\n    primary_recommendation: adaptiveRecommendations.primary_method,\n    disposal_methods: adaptiveMethods,\n    step_by_step_instructions: instructions,\n    safety_considerations: wasteInfo.safety_level === 'high' || wasteInfo.safety_level === 'very_high' ?\n      ['Use protective equipment', 'Follow safety protocols', 'Consider professional help'] :\n      ['Basic safety precautions', 'Handle with care'],\n    method_count: adaptiveMethods.length\n  },\n  environmental_impact: impactInfo,\n  personalized_recommendations: adaptiveRecommendations,\n  location_specific: {\n    user_location: userLocation,\n    regional_notes: userLocation === 'urban' ? \n      'Urban areas typically have more disposal options and pickup services' :\n      userLocation === 'rural' ?\n      'Rural areas may require more planning and transport to facilities' :\n      'Check local municipal websites for specific disposal programs',\n    seasonal_considerations: season !== 'all' ? \n      `${season.charAt(0).toUpperCase() + season.slice(1)} disposal considerations applied` :\n      'Year-round disposal guidance provided'\n  },\n  next_steps: [\n    `Research local ${adaptiveMethods[0]?.title || 'disposal'} options`,\n    'Prepare items according to guidelines',\n    'Contact facilities to confirm requirements',\n    'Schedule disposal or pickup if needed'\n  ]\n};\n\nreturn { json: result };"
      },
      "id": "enhanced-disposal-guide-logic",
      "name": "Enhanced Disposal Guide Logic",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "response-enhanced-guide",
      "name": "Enhanced Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 300]
    }
  ],
  "connections": {
    "Webhook - Enhanced Disposal Guide": {
      "main": [
        [
          {
            "node": "Enhanced Disposal Guide Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Disposal Guide Logic": {
      "main": [
        [
          {
            "node": "Enhanced Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "createdAt": "2025-09-05T16:15:00.000Z",
  "updatedAt": "2025-09-05T16:15:00.000Z",
  "id": "enhanced-disposal-guide-workflow"
}
