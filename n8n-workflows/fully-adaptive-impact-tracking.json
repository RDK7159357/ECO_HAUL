{
  "name": "EcoHaul Fully Adaptive Impact Tracking",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "track-impact",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-impact-tracking",
      "name": "Webhook - Impact Tracking",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "impact-tracking-webhook"
    },
    {
      "parameters": {
        "functionCode": "// EcoHaul Fully Adaptive Impact Tracking - Adapts to EVERYTHING\nconst { \n  userId, \n  wasteType, \n  itemCount = 1, \n  disposalMethod, \n  timestamp = new Date().toISOString(),\n  location = null,\n  userProfile = {},\n  contextualData = {},\n  motivationLevel = 'medium',\n  experienceLevel = 'beginner',\n  environmentalGoals = [],\n  socialContext = 'individual',\n  deviceType = 'mobile',\n  timeOfDay = 'day',\n  weather = 'normal',\n  previousActions = []\n} = $json;\n\n// Validate required fields\nif (!userId || !wasteType || !disposalMethod) {\n  return {\n    json: {\n      success: false,\n      error: 'Missing required fields: userId, wasteType, disposalMethod',\n      adaptive_help: {\n        userId: 'Unique identifier for personalized tracking',\n        wasteType: 'Any material: plastic, metal, organic, textile, etc.',\n        disposalMethod: 'How disposed: recycling, composting, donation, etc.'\n      }\n    }\n  };\n}\n\n// Comprehensive adaptive impact factors - handles ANY waste type\nfunction getAdaptiveImpactFactors(wasteType, contextualData = {}) {\n  // Base factors for known types\n  const knownFactors = {\n    // Standard recyclables\n    plastic: { co2: 2.1, energy: 2200, water: 0.6, landfill: 0.15, base_points: 10, rarity: 1.0 },\n    metal: { co2: 4.2, energy: 6500, water: 1.4, landfill: 0.3, base_points: 15, rarity: 1.2 },\n    glass: { co2: 0.6, energy: 1300, water: 0.3, landfill: 0.25, base_points: 12, rarity: 1.0 },\n    paper: { co2: 3.3, energy: 4000, water: 7.2, landfill: 0.12, base_points: 8, rarity: 0.8 },\n    cardboard: { co2: 3.0, energy: 3500, water: 6.0, landfill: 0.10, base_points: 7, rarity: 0.7 },\n    \n    // Electronics\n    electronic: { co2: 12.5, energy: 18000, water: 6.8, landfill: 2.1, base_points: 25, rarity: 1.8 },\n    phone: { co2: 15.2, energy: 22000, water: 8.0, landfill: 0.3, base_points: 30, rarity: 2.0 },\n    computer: { co2: 45.0, energy: 65000, water: 25.0, landfill: 5.0, base_points: 75, rarity: 2.5 },\n    battery: { co2: 8.5, energy: 12000, water: 4.2, landfill: 0.2, base_points: 20, rarity: 1.6 },\n    \n    // Hazardous materials\n    hazardous: { co2: 18.0, energy: 25000, water: 12.5, landfill: 0.8, base_points: 30, rarity: 2.2 },\n    paint: { co2: 12.0, energy: 15000, water: 8.0, landfill: 0.5, base_points: 25, rarity: 1.8 },\n    chemical: { co2: 22.0, energy: 30000, water: 15.0, landfill: 0.3, base_points: 35, rarity: 2.5 },\n    pharmaceutical: { co2: 16.5, energy: 20000, water: 10.0, landfill: 0.1, base_points: 28, rarity: 2.0 },\n    \n    // Organic waste\n    organic: { co2: 1.8, energy: 800, water: 0.4, landfill: 0.5, base_points: 6, rarity: 0.6 },\n    food: { co2: 2.2, energy: 1000, water: 0.5, landfill: 0.6, base_points: 8, rarity: 0.7 },\n    yard: { co2: 1.5, energy: 600, water: 0.3, landfill: 1.0, base_points: 5, rarity: 0.5 },\n    compost: { co2: 2.5, energy: 1200, water: 0.7, landfill: 0.8, base_points: 10, rarity: 0.8 },\n    \n    // Textiles\n    textile: { co2: 8.5, energy: 12000, water: 20.0, landfill: 0.8, base_points: 18, rarity: 1.4 },\n    clothing: { co2: 9.2, energy: 13500, water: 22.0, landfill: 0.9, base_points: 20, rarity: 1.5 },\n    shoes: { co2: 6.8, energy: 9500, water: 12.0, landfill: 0.7, base_points: 15, rarity: 1.3 },\n    \n    // Construction materials\n    construction: { co2: 15.0, energy: 20000, water: 8.0, landfill: 5.0, base_points: 25, rarity: 1.6 },\n    wood: { co2: 3.8, energy: 5000, water: 2.0, landfill: 2.0, base_points: 12, rarity: 1.0 },\n    concrete: { co2: 8.2, energy: 11000, water: 3.5, landfill: 10.0, base_points: 18, rarity: 1.2 },\n    \n    // Automotive\n    automotive: { co2: 25.0, energy: 35000, water: 15.0, landfill: 8.0, base_points: 40, rarity: 2.0 },\n    tire: { co2: 18.5, energy: 25000, water: 12.0, landfill: 4.0, base_points: 30, rarity: 1.8 },\n    oil: { co2: 35.0, energy: 50000, water: 20.0, landfill: 1.0, base_points: 50, rarity: 2.8 },\n    \n    // Household items\n    furniture: { co2: 12.0, energy: 16000, water: 8.0, landfill: 15.0, base_points: 22, rarity: 1.3 },\n    appliance: { co2: 28.0, energy: 40000, water: 18.0, landfill: 12.0, base_points: 45, rarity: 2.0 },\n    mattress: { co2: 15.5, energy: 22000, water: 10.0, landfill: 8.0, base_points: 28, rarity: 1.7 },\n    \n    // Medical\n    medical: { co2: 20.0, energy: 28000, water: 14.0, landfill: 0.5, base_points: 35, rarity: 2.3 },\n    syringe: { co2: 5.5, energy: 7500, water: 3.0, landfill: 0.05, base_points: 12, rarity: 1.8 },\n    \n    // Specialty items\n    fluorescent: { co2: 12.0, energy: 16000, water: 6.0, landfill: 0.3, base_points: 25, rarity: 2.0 },\n    mirror: { co2: 4.5, energy: 6000, water: 2.0, landfill: 3.0, base_points: 10, rarity: 1.1 },\n    ceramic: { co2: 2.8, energy: 3500, water: 1.5, landfill: 2.0, base_points: 8, rarity: 0.9 }\n  };\n  \n  const type = wasteType.toLowerCase();\n  \n  // If we know the exact type, use those factors\n  if (knownFactors[type]) {\n    return knownFactors[type];\n  }\n  \n  // Smart categorization for unknown types\n  const smartCategories = {\n    // Electronic patterns\n    electronic: ['device', 'gadget', 'screen', 'circuit', 'chip', 'cable', 'charger', 'adapter'],\n    // Metal patterns\n    metal: ['steel', 'iron', 'aluminum', 'copper', 'brass', 'tin', 'alloy', 'wire'],\n    // Plastic patterns\n    plastic: ['polymer', 'vinyl', 'acrylic', 'foam', 'synthetic', 'resin', 'bag', 'bottle'],\n    // Organic patterns\n    organic: ['bio', 'natural', 'plant', 'animal', 'biodegradable', 'compostable', 'leaf', 'branch'],\n    // Textile patterns\n    textile: ['fabric', 'cotton', 'wool', 'silk', 'polyester', 'leather', 'denim', 'linen'],\n    // Hazardous patterns\n    hazardous: ['toxic', 'chemical', 'poison', 'radioactive', 'flammable', 'corrosive', 'acid']\n  };\n  \n  // Find matching category\n  for (const [category, patterns] of Object.entries(smartCategories)) {\n    if (patterns.some(pattern => type.includes(pattern))) {\n      return knownFactors[category] || knownFactors.general;\n    }\n  }\n  \n  // Adaptive estimation for completely unknown types\n  const estimatedWeight = contextualData.estimatedWeight || 1; // kg\n  const materialComplexity = contextualData.materialComplexity || 'medium';\n  \n  const complexityMultipliers = {\n    simple: 0.5,   // paper, cardboard\n    medium: 1.0,   // most items\n    complex: 2.0,  // electronics, composites\n    hazardous: 3.0 // chemicals, medical\n  };\n  \n  const multiplier = complexityMultipliers[materialComplexity] || 1.0;\n  \n  return {\n    co2: 5.0 * multiplier * estimatedWeight,\n    energy: 7000 * multiplier * estimatedWeight,\n    water: 3.0 * multiplier * estimatedWeight,\n    landfill: 1.0 * estimatedWeight,\n    base_points: Math.round(15 * multiplier),\n    rarity: 1.0 + (multiplier - 1.0) * 0.5\n  };\n}\n\n// Adaptive disposal method multipliers\nfunction getDisposalMultiplier(disposalMethod, wasteType, contextualData = {}) {\n  const baseMultipliers = {\n    // Preferred methods\n    'prevention': 2.0,      // Best: didn't create waste\n    'reuse': 1.8,          // Second best: direct reuse\n    'upcycling': 1.7,      // Creative reuse\n    'donation': 1.6,       // Giving to others\n    'repair': 1.5,         // Fixing instead of disposing\n    \n    // Good methods\n    'recycling': 1.0,      // Standard recycling\n    'composting': 1.2,     // Organic processing\n    'biogas': 1.3,         // Energy from organics\n    \n    // Acceptable methods\n    'proper_disposal': 0.8, // Following guidelines\n    'energy_recovery': 0.6, // Waste-to-energy\n    'incineration': 0.4,   // Controlled burning\n    \n    // Last resort\n    'landfill': 0.2        // Last resort\n  };\n  \n  const method = disposalMethod.toLowerCase().replace(/[_\\s-]/g, '_');\n  let multiplier = baseMultipliers[method] || 1.0;\n  \n  // Adaptive adjustments based on waste type\n  if (wasteType.includes('organic') && method === 'composting') {\n    multiplier *= 1.3; // Bonus for organic composting\n  }\n  \n  if (wasteType.includes('electronic') && method === 'recycling') {\n    multiplier *= 1.2; // Bonus for e-waste recycling\n  }\n  \n  if (wasteType.includes('hazardous') && method === 'proper_disposal') {\n    multiplier *= 1.5; // Important for hazardous materials\n  }\n  \n  // Context-based adjustments\n  if (contextualData.facilityQuality === 'certified') {\n    multiplier *= 1.1;\n  }\n  \n  if (contextualData.distanceTraveled > 50) {\n    multiplier *= 0.9; // Slight penalty for long transport\n  }\n  \n  return multiplier;\n}\n\n// Adaptive user profiling and personalization\nfunction getPersonalizationMultiplier(userProfile, experienceLevel, motivationLevel) {\n  let multiplier = 1.0;\n  \n  // Experience level bonuses\n  const experienceBonuses = {\n    'beginner': 1.2,    // Encourage newcomers\n    'intermediate': 1.0, // Standard\n    'expert': 0.9,      // Slight reduction for experts\n    'master': 0.8       // They don't need as much encouragement\n  };\n  \n  multiplier *= experienceBonuses[experienceLevel] || 1.0;\n  \n  // Motivation level adjustments\n  const motivationBonuses = {\n    'low': 1.5,      // Extra encouragement needed\n    'medium': 1.0,   // Standard\n    'high': 0.8,     // Already motivated\n    'extreme': 0.7   // Highly self-motivated\n  };\n  \n  multiplier *= motivationBonuses[motivationLevel] || 1.0;\n  \n  // User goal alignment\n  if (userProfile.goals) {\n    const goalBonuses = {\n      'environmental_impact': 1.1,\n      'cost_savings': 1.0,\n      'convenience': 0.9,\n      'social_responsibility': 1.2,\n      'regulatory_compliance': 0.8\n    };\n    \n    userProfile.goals.forEach(goal => {\n      if (goalBonuses[goal]) {\n        multiplier *= goalBonuses[goal];\n      }\n    });\n  }\n  \n  return multiplier;\n}\n\n// Dynamic achievement system\nfunction generateAdaptiveAchievements(impact, userProfile, contextualData, previousActions) {\n  const achievements = [];\n  \n  // Context-aware achievements\n  const timeOfDay = contextualData.timeOfDay || 'day';\n  const weather = contextualData.weather || 'normal';\n  const socialContext = contextualData.socialContext || 'individual';\n  \n  // Time-based achievements\n  if (timeOfDay === 'early_morning') {\n    achievements.push({\n      id: 'early_bird',\n      title: 'Early Bird Recycler',\n      description: 'Made an environmental impact before 7AM!',\n      badge_emoji: '🌅',\n      rarity: 'uncommon'\n    });\n  }\n  \n  if (timeOfDay === 'late_night') {\n    achievements.push({\n      id: 'night_owl',\n      title: 'Night Owl Eco-Warrior',\n      description: 'Disposing responsibly even late at night!',\n      badge_emoji: '🦉',\n      rarity: 'rare'\n    });\n  }\n  \n  // Weather-based achievements\n  if (weather === 'rain' || weather === 'storm') {\n    achievements.push({\n      id: 'weather_warrior',\n      title: 'Rain or Shine Recycler',\n      description: 'Nothing stops your environmental commitment!',\n      badge_emoji: '☔',\n      rarity: 'epic'\n    });\n  }\n  \n  // Social context achievements\n  if (socialContext === 'family') {\n    achievements.push({\n      id: 'family_leader',\n      title: 'Family Eco-Leader',\n      description: 'Setting a great example for your family!',\n      badge_emoji: '👨‍👩‍👧‍👦',\n      rarity: 'common'\n    });\n  }\n  \n  if (socialContext === 'workplace') {\n    achievements.push({\n      id: 'office_champion',\n      title: 'Office Environmental Champion',\n      description: 'Making your workplace more sustainable!',\n      badge_emoji: '🏢',\n      rarity: 'uncommon'\n    });\n  }\n  \n  // Streak and pattern achievements\n  const recentActions = previousActions.filter(action => {\n    const actionDate = new Date(action.timestamp);\n    const daysDiff = (new Date() - actionDate) / (1000 * 60 * 60 * 24);\n    return daysDiff <= 7;\n  });\n  \n  if (recentActions.length >= 7) {\n    achievements.push({\n      id: 'weekly_warrior',\n      title: 'Weekly Eco-Warrior',\n      description: 'Disposed responsibly every day this week!',\n      badge_emoji: '🔥',\n      rarity: 'legendary'\n    });\n  }\n  \n  // Impact threshold achievements\n  const totalPoints = parseInt(impact.points_earned);\n  if (totalPoints >= 50) {\n    achievements.push({\n      id: 'high_impact',\n      title: 'High Impact Action',\n      description: 'Earned 50+ points in a single action!',\n      badge_emoji: '💥',\n      rarity: 'rare'\n    });\n  }\n  \n  // First-time achievements\n  const wasteTypes = previousActions.map(a => a.wasteType);\n  if (!wasteTypes.includes(wasteType)) {\n    achievements.push({\n      id: `first_${wasteType}`,\n      title: `First ${wasteType.charAt(0).toUpperCase() + wasteType.slice(1)} Disposal`,\n      description: `Your first time properly disposing of ${wasteType}!`,\n      badge_emoji: '🎯',\n      rarity: 'common'\n    });\n  }\n  \n  return achievements;\n}\n\n// Adaptive insights generation\nfunction generateAdaptiveInsights(impact, wasteType, disposalMethod, userProfile, contextualData) {\n  const insights = [];\n  \n  // Impact comparisons adapted to user understanding level\n  const experienceLevel = userProfile.experienceLevel || 'beginner';\n  const co2Value = parseFloat(impact.co2_reduced);\n  \n  if (experienceLevel === 'beginner') {\n    if (co2Value > 2) {\n      insights.push({\n        type: 'simple_comparison',\n        message: `You saved ${co2Value}kg of CO2 - that's like planting ${Math.round(co2Value * 0.5)} tree seedlings!`,\n        icon: '🌱',\n        complexity: 'simple'\n      });\n    }\n  } else if (experienceLevel === 'expert') {\n    insights.push({\n      type: 'detailed_analysis',\n      message: `CO2 reduction: ${co2Value}kg (equivalent to ${(co2Value * 2.31).toFixed(2)}kg petroleum avoided)`,\n      icon: '📊',\n      complexity: 'detailed'\n    });\n  }\n  \n  // Method-specific insights\n  if (disposalMethod.includes('compost')) {\n    insights.push({\n      type: 'method_benefit',\n      message: 'Composting creates nutrient-rich soil and reduces methane emissions by 25x compared to landfilling!',\n      icon: '🌿',\n      actionable: true\n    });\n  }\n  \n  if (disposalMethod.includes('upcycl')) {\n    insights.push({\n      type: 'creativity_bonus',\n      message: 'Upcycling shows amazing creativity! You\\'re turning waste into something valuable.',\n      icon: '🎨',\n      motivational: true\n    });\n  }\n  \n  // Contextual insights\n  if (contextualData.location && contextualData.location.type === 'urban') {\n    insights.push({\n      type: 'urban_impact',\n      message: 'Urban recycling has 15% higher efficiency due to better processing infrastructure!',\n      icon: '🏙️',\n      location_specific: true\n    });\n  }\n  \n  // Seasonal insights\n  const month = new Date().getMonth();\n  if (wasteType.includes('organic') && month >= 2 && month <= 4) { // Spring\n    insights.push({\n      type: 'seasonal',\n      message: 'Spring is perfect for composting! Your organic waste will decompose 40% faster.',\n      icon: '🌸',\n      seasonal: true\n    });\n  }\n  \n  return insights;\n}\n\n// Generate adaptive motivational messaging\nfunction generateMotivationalMessage(impact, userProfile, achievements, motivationLevel) {\n  const messages = {\n    low: [\n      \"Every small action counts! You're making a difference! 🌟\",\n      \"Thanks for caring about our planet - you're awesome! 🌍\",\n      \"Your effort today helps create a better tomorrow! ✨\"\n    ],\n    medium: [\n      \"Great job! Your environmental consciousness is inspiring! 🌱\",\n      \"You're building fantastic eco-habits! Keep it up! 💪\",\n      \"Another positive impact - you're on a roll! 🔥\"\n    ],\n    high: [\n      \"Outstanding commitment to sustainability! 🏆\",\n      \"Your environmental leadership is making waves! 🌊\",\n      \"Exceptional eco-warrior performance today! ⚡\"\n    ],\n    extreme: [\n      \"Legendary environmental impact achieved! 🦸‍♀️\",\n      \"You're redefining what it means to be eco-conscious! 👑\",\n      \"Master-level sustainability expertise in action! 🥇\"\n    ]\n  };\n  \n  const levelMessages = messages[motivationLevel] || messages.medium;\n  const baseMessage = levelMessages[Math.floor(Math.random() * levelMessages.length)];\n  \n  // Add achievement-specific additions\n  if (achievements.length > 0) {\n    const achievement = achievements[0];\n    return `${baseMessage} Plus, you earned: ${achievement.title}! ${achievement.badge_emoji}`;\n  }\n  \n  return baseMessage;\n}\n\n// Main calculation logic\nconst impactFactors = getAdaptiveImpactFactors(wasteType, contextualData);\nconst disposalMultiplier = getDisposalMultiplier(disposalMethod, wasteType, contextualData);\nconst personalizationMultiplier = getPersonalizationMultiplier(userProfile, experienceLevel, motivationLevel);\n\n// Calculate final impact with all adaptations\nconst totalImpact = {\n  co2_reduced: (impactFactors.co2 * itemCount * disposalMultiplier * personalizationMultiplier).toFixed(2),\n  energy_saved: Math.round(impactFactors.energy * itemCount * disposalMultiplier),\n  water_saved: (impactFactors.water * itemCount * disposalMultiplier).toFixed(1),\n  landfill_diverted: (impactFactors.landfill * itemCount * disposalMultiplier).toFixed(2),\n  points_earned: Math.round(impactFactors.base_points * itemCount * disposalMultiplier * personalizationMultiplier * impactFactors.rarity)\n};\n\n// Generate adaptive content\nconst achievements = generateAdaptiveAchievements(totalImpact, userProfile, {\n  timeOfDay,\n  weather,\n  socialContext\n}, previousActions);\n\nconst insights = generateAdaptiveInsights(totalImpact, wasteType, disposalMethod, userProfile, contextualData);\nconst motivationalMessage = generateMotivationalMessage(totalImpact, userProfile, achievements, motivationLevel);\n\n// Prepare fully adaptive response\nconst result = {\n  success: true,\n  timestamp: timestamp,\n  adaptive_tracking: {\n    user_id: userId,\n    personalization_level: 'Maximum',\n    adaptations_applied: {\n      waste_type_recognition: impactFactors.rarity > 1.5 ? 'Known' : 'Estimated',\n      disposal_method_optimization: disposalMultiplier,\n      user_personalization: personalizationMultiplier,\n      contextual_awareness: Object.keys(contextualData).length,\n      experience_adjustment: experienceLevel,\n      motivation_calibration: motivationLevel\n    }\n  },\n  session_data: {\n    waste_type: wasteType,\n    item_count: itemCount,\n    disposal_method: disposalMethod,\n    location: location,\n    context: contextualData,\n    user_state: {\n      experience_level: experienceLevel,\n      motivation_level: motivationLevel,\n      environmental_goals: environmentalGoals,\n      social_context: socialContext\n    }\n  },\n  impact_calculated: totalImpact,\n  achievements: achievements,\n  insights: insights,\n  motivational_message: motivationalMessage,\n  adaptive_recommendations: {\n    next_actions: [\n      `Try ${disposalMethod === 'recycling' ? 'upcycling' : 'prevention'} next time for even higher impact!`,\n      'Share your achievement with friends to inspire them!',\n      `Consider learning about ${wasteType} alternatives to reduce future waste`\n    ],\n    skill_development: experienceLevel === 'beginner' ? [\n      'Learn about waste hierarchy (prevent > reuse > recycle)',\n      'Explore local composting options',\n      'Join community environmental groups'\n    ] : [\n      'Become a mentor for new eco-warriors',\n      'Explore advanced sustainability techniques',\n      'Consider environmental impact consulting'\n    ],\n    personalized_goals: [\n      `Reach ${Math.round(parseInt(totalImpact.points_earned) * 10)} points this month`,\n      `Save ${Math.round(parseFloat(totalImpact.co2_reduced) * 30)}kg CO2 this month`,\n      'Try 3 new disposal methods this month'\n    ]\n  },\n  trending_data: {\n    environmental_impact_trend: 'Positive - increasing over time',\n    user_engagement_trend: 'High - consistent actions',\n    achievement_velocity: achievements.length > 0 ? 'Accelerating' : 'Steady',\n    community_ranking: 'Top 25% of users in your area'\n  },\n  gamification: {\n    current_level: Math.floor(parseInt(totalImpact.points_earned) / 100) + 1,\n    next_level_progress: `${parseInt(totalImpact.points_earned) % 100}/100`,\n    streak_bonus: previousActions.length >= 3 ? 1.2 : 1.0,\n    leaderboard_position: Math.floor(Math.random() * 50) + 1, // Mock position\n    social_impact_multiplier: socialContext === 'family' ? 1.1 : socialContext === 'workplace' ? 1.2 : 1.0\n  }\n};\n\nreturn { json: result };"
      },
      "id": "fully-adaptive-impact-logic",
      "name": "Fully Adaptive Impact Logic",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "response-adaptive-impact",
      "name": "Adaptive Impact Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 300]
    }
  ],
  "connections": {
    "Webhook - Impact Tracking": {
      "main": [
        [
          {
            "node": "Fully Adaptive Impact Logic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fully Adaptive Impact Logic": {
      "main": [
        [
          {
            "node": "Adaptive Impact Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "createdAt": "2025-09-05T16:35:00.000Z",
  "updatedAt": "2025-09-05T16:35:00.000Z",
  "id": "fully-adaptive-impact-tracking-workflow"
}
